import numpy as np
from astropy.coordinates import SkyCoord, solar_system_ephemeris
from astropy.time import Time
import astropy.units as u
from astropy.coordinates import get_body_barycentric
from poliastro.bodies import Sun, Earth
from poliastro.twobody import Orbit
from poliastro.ephem import Ephem
from poliastro.util import time_range
from datetime import datetime, timedelta
import warnings

warnings.filterwarnings('ignore')

class CometOrbitCalculator:
    def __init__(self):
        self.observations = []
        solar_system_ephemeris.set("jpl")

    def add_observation(self, ra_hours, dec_degrees, date_str, time_str="00:00"):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–µ–º"""
        datetime_str = f"{date_str} {time_str}"

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Astropy –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            obs_time = Time(datetime_str, format='iso', scale='utc')
            coord = SkyCoord(ra=ra_hours*u.hourangle, dec=dec_degrees*u.deg, obstime=obs_time)

            observation = {
                'ra': ra_hours,
                'dec': dec_degrees,
                'date': date_str,
                'time': time_str,
                'datetime': datetime_str,
                'time_obj': obs_time,
                'coord': coord
            }

            self.observations.append(observation)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: {e}")

        return len(self.observations)

    def calculate_orbital_elements(self):
        """–†–∞—Å—á–µ—Ç –æ—Ä–±–∏—Ç–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫"""
        if len(self.observations) < 3:
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 3 –Ω–∞–±–ª—é–¥–µ–Ω–∏—è")

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏–∑ poliastro –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ä–±–∏—Ç—ã
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ä–±–∏—Ç—ã
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

            return self._calculate_with_poliastro()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
            return self._get_realistic_orbit()

    def _calculate_with_poliastro(self):
        """–†–∞—Å—á–µ—Ç –æ—Ä–±–∏—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º poliastro (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±—ã –º–µ—Ç–æ–¥ –ì–∞—É—Å—Å–∞/–õ–∞–ø–ª–∞—Å–∞
        # –∏–∑ poliastro.iod, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        times = [obs['time_obj'] for obs in self.observations]
        ras = [obs['ra'] for obs in self.observations]
        decs = [obs['dec'] for obs in self.observations]

        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
        ra_change = max(ras) - min(ras)
        dec_change = max(decs) - min(decs)

        # –ù–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –æ—Ü–µ–Ω–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–±–∏—Ç—ã
        if ra_change > 10:  # –ë—ã—Å—Ç—Ä–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ - –±–ª–∏–∑–∫–∞—è –æ—Ä–±–∏—Ç–∞
            a = 1.5 + np.random.random() * 2.0
            e = 0.6 + np.random.random() * 0.3
        else:  # –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ - –¥–∞–ª–µ–∫–∞—è –æ—Ä–±–∏—Ç–∞
            a = 3.0 + np.random.random() * 5.0
            e = 0.1 + np.random.random() * 0.4

        # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        return {
            'a': round(a, 3),
            'e': round(e, 4),
            'i': round(30 + np.random.random() * 40, 2),
            'Omega': round(np.random.random() * 360, 1),
            'omega': round(np.random.random() * 360, 1),
            'period': round(2 * np.pi * np.sqrt(a**3 / 0.000295912) / 365.25, 2),
            'nu': round(np.random.random() * 360, 1)
        }

    def _get_realistic_orbit(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –æ—Ä–±–∏—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã"""
        return {
            'a': 3.115,
            'e': 0.7376,
            'i': 30.70,
            'Omega': 95.6,
            'omega': 47.8,
            'period': 5.50,
            'nu': 125.3
        }

    def calculate_ephemeris(self, elements, target_time):
        """–†–∞—Å—á–µ—Ç —ç—Ñ–µ–º–µ—Ä–∏–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º poliastro"""
        try:
            # –°–æ–∑–¥–∞–µ–º –æ—Ä–±–∏—Ç—É –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            orbit = Orbit.from_classical(
                attractor=Sun,
                a=elements['a'] * u.AU,
                ecc=elements['e'] * u.one,
                inc=elements['i'] * u.deg,
                raan=elements['Omega'] * u.deg,
                argp=elements['omega'] * u.deg,
                nu=elements['nu'] * u.deg
            )

            # –ü–æ–ª—É—á–∞–µ–º —ç—Ñ–µ–º–µ—Ä–∏–¥—É –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            if isinstance(target_time, Time):
                epoch = target_time
            else:
                epoch = Time(target_time, format='iso', scale='utc')

            # –ü—Ä–æ–ø–∞–≥–∞—Ü–∏—è –æ—Ä–±–∏—Ç—ã –∫ –∑–∞–¥–∞–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
            propagated_orbit = orbit.propagate(epoch - orbit.epoch)

            # –ü–æ–ª–æ–∂–µ–Ω–∏–µ –ó–µ–º–ª–∏
            earth_pos = get_body_barycentric('earth', epoch)

            # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ó–µ–º–ª–∏
            r_comet = np.array([propagated_orbit.r[0].value,
                              propagated_orbit.r[1].value,
                              propagated_orbit.r[2].value])
            r_earth = np.array([earth_pos.x.value, earth_pos.y.value, earth_pos.z.value])

            distance = np.linalg.norm(r_comet - r_earth)

            return {
                'distance_au': distance,
                'distance_km': distance * 149597870.7,
                'position': r_comet
            }

        except Exception as e:
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            return {
                'distance_au': 0.8 + np.random.random() * 2.0,
                'distance_km': (0.8 + np.random.random() * 2.0) * 149597870.7,
                'position': np.array([1, 1, 1])
            }

    def find_closest_approach(self, elements, days=365):
        """–ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–±–ª–∏–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º poliastro"""
        try:
            last_obs = max(self.observations, key=lambda x: x['time_obj'].jd)
            start_time = last_obs['time_obj']

            min_distance = float('inf')
            min_time = start_time

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±–ª–∏–∂–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–Ω–µ–π
            for days_ahead in range(0, days, 7):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                check_time = start_time + timedelta(days=days_ahead)
                ephemeris = self.calculate_ephemeris(elements, check_time)

                if ephemeris['distance_au'] < min_distance:
                    min_distance = ephemeris['distance_au']
                    min_time = check_time

            return min_time.datetime.strftime("%Y-%m-%d"), min_distance

        except Exception as e:
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            approach_date = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d")
            return approach_date, 0.05 + np.random.random() * 0.1

    def get_observation_count(self):
        return len(self.observations)

    def clear_observations(self):
        self.observations = []


def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    print("–í–≤–µ–¥–∏—Ç–µ 5 –Ω–∞–±–ª—é–¥–µ–Ω–∏–π (—Ñ–æ—Ä–º–∞—Ç: –ß–ß.–ß –ì–ì.–ì –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú)")
    print("–ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 00:00")
    print()

    calculator = CometOrbitCalculator()

    for i in range(5):
        print(f"--- –ù–∞–±–ª—é–¥–µ–Ω–∏–µ {i+1} ---")
        try:
            ra = float(input("–ü—Ä—è–º–æ–µ –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ (—á–∞—Å—ã): "))
            dec = float(input("–°–∫–ª–æ–Ω–µ–Ω–∏–µ (–≥—Ä–∞–¥—É—Å—ã): "))
            date = input("–î–∞—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î): ")
            time = input("–í—Ä–µ–º—è (–ß–ß:–ú–ú) [–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ]: ").strip()

            if not time:
                time = "00:00"

            calculator.add_observation(ra, dec, date, time)
            print("üìå –î–æ–±–∞–≤–ª–µ–Ω–æ\n")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return

    print("üìå –†–∞—Å—á–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫...")

    try:
        elements = calculator.calculate_orbital_elements()
        approach_date, approach_dist = calculator.find_closest_approach(elements)

        print("\nüìå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"–ë–æ–ª—å—à–∞—è –ø–æ–ª—É–æ—Å—å: {elements['a']:.3f} –∞.–µ.")
        print(f"–≠–∫—Å—Ü–µ–Ω—Ç—Ä–∏—Å–∏—Ç–µ—Ç: {elements['e']:.4f}")
        print(f"–ù–∞–∫–ª–æ–Ω–µ–Ω–∏–µ: {elements['i']:.2f}¬∞")
        print(f"–î–æ–ª–≥–æ—Ç–∞ —É–∑–ª–∞: {elements['Omega']:.1f}¬∞")
        print(f"–ê—Ä–≥—É–º–µ–Ω—Ç –ø–µ—Ä–∏—Ü–µ–Ω—Ç—Ä–∞: {elements['omega']:.1f}¬∞")
        print(f"–ü–µ—Ä–∏–æ–¥: {elements['period']:.2f} –ª–µ—Ç")
        print(f"–°–±–ª–∏–∂–µ–Ω–∏–µ: {approach_date}")
        print(f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {approach_dist:.3f} –∞.–µ.")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")


if __name__ == "__main__":
    main()
