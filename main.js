let pointCounter = 5;
let currentOrbitData = null;

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
function initImageUpload() {
    const imageUpload = document.getElementById('imageUpload');
    const imagePreview = document.getElementById('imagePreview');

    imageUpload.addEventListener('change', handleImageUpload);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    imagePreview.addEventListener('dragover', function(e) {
        e.preventDefault();
        this.style.borderColor = '#3498db';
        this.style.background = '#f8f9fa';
    });

    imagePreview.addEventListener('dragleave', function(e) {
        e.preventDefault();
        this.style.borderColor = '#bdc3c7';
        this.style.background = '#ffffff';
    });

    imagePreview.addEventListener('drop', function(e) {
        e.preventDefault();
        this.style.borderColor = '#bdc3c7';
        this.style.background = '#ffffff';

        const files = e.dataTransfer.files;
        if (files.length > 0) {
            imageUpload.files = files;
            handleImageUpload({ target: imageUpload });
        }
    });
}

function handleImageUpload(event) {
    const file = event.target.files[0];
    if (!file) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (!file.type.match('image.*')) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPEG, PNG, GIF –∏ —Ç.–¥.)');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
    if (file.size > 5 * 1024 * 1024) {
        alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB');
        return;
    }

    const reader = new FileReader();

    reader.onload = function(e) {
        const imagePreview = document.getElementById('imagePreview');
        imagePreview.innerHTML = '';

        const img = document.createElement('img');
        img.src = e.target.result;
        img.alt = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–µ—Ç—ã';

        imagePreview.appendChild(img);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ localStorage
        localStorage.setItem('cometImage', e.target.result);

        showNotification('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!', 'success');
    };

    reader.onerror = function() {
        showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞', 'error');
    };

    reader.readAsDataURL(file);
}

function removeImage() {
    const imagePreview = document.getElementById('imagePreview');
    const imageUpload = document.getElementById('imageUpload');

    imagePreview.innerHTML = `
        <div class="placeholder-content">
            <div class="placeholder-icon"></div>
            <p>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å—é–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ<br>–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</p>
        </div>
    `;
    imageUpload.value = '';

    // –£–¥–∞–ª—è–µ–º –∏–∑ localStorage
    localStorage.removeItem('cometImage');

    showNotification('üóë –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ', 'info');
}

function restoreImage() {
    const savedImage = localStorage.getItem('cometImage');
    if (savedImage) {
        const imagePreview = document.getElementById('imagePreview');
        imagePreview.innerHTML = '';

        const img = document.createElement('img');
        img.src = savedImage;
        img.alt = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–µ—Ç—ã';

        imagePreview.appendChild(img);
    }
}

function showNotification(message, type) {
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        background: ${type === 'success' ? '#27ae60' : type === 'error' ? '#e74c3c' : '#3498db'};
        color: white;
        border-radius: 10px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        z-index: 1000;
        font-weight: 600;
        transform: translateX(100%);
        transition: transform 0.3s ease;
    `;
    notification.textContent = message;

    document.body.appendChild(notification);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 100);
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        setTimeout(() => {
          notification.style.transform = 'translateX(100%)';
          setTimeout(() => {
              document.body.removeChild(notification);
          }, 300);
      }, 3000);
  }

// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• –ü–õ–ê–ù–ï–¢

async function loadPlanets() {
    try {
        const response = await fetch('http://127.0.0.1:5001/api/planets');
        const result = await response.json();

        if (result.success) {
            displayPlanets(result.planets);
        } else {
            alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–µ—Ç: ' + result.error);
        }
    } catch (error) {
        alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + error.message);
    }
}

function displayPlanets(planets) {
  const planetsList = document.getElementById('planets-list');
  planetsList.innerHTML = '';

  if (planets.length === 0) {
      planetsList.innerHTML = '<p style="text-align: center; color: #666; padding: 20px;">–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç</p>';
      return;
  }

  planets.forEach(planet => {
      const planetElement = document.createElement('div');
      planetElement.className = 'planet-card';

      // –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–ï–í–¨–Æ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
      const imagePreview = planet.image_data ?
          `<div class="planet-image-preview">
              <img src="${planet.image_data}" alt="${planet.name}" onclick="showFullImage('${planet.image_data}')">
          </div>` :
          '<div class="planet-no-image">üì∑ –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>';

      planetElement.innerHTML = `
          <div class="planet-header">
              <h3>${planet.name}</h3>
              <button class="delete-btn" onclick="deletePlanet(${planet.id})">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
          </div>
          ${imagePreview}
          <div class="planet-info">
              <p><strong>–ù–∞–±–ª—é–¥–µ–Ω–∏—è:</strong> ${planet.observations.length} —Ç–æ—á–µ–∫</p>
              <p><strong>–ë–æ–ª—å—à–∞—è –ø–æ–ª—É–æ—Å—å:</strong> ${planet.orbital_elements.semi_major_axis} –∞.–µ.</p>
              <p><strong>–≠–∫—Å—Ü–µ–Ω—Ç—Ä–∏—Å–∏—Ç–µ—Ç:</strong> ${planet.orbital_elements.eccentricity}</p>
              <p><strong>–°–æ–∑–¥–∞–Ω–∞:</strong> ${new Date(planet.created_at).toLocaleString()}</p>
          </div>
          <button class="load-btn" onclick="loadPlanetData(${planet.id})">üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</button>
      `;
      planetsList.appendChild(planetElement);
  });
}

// –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–ö–ê–ó–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –í –ü–û–õ–ù–û–ú –†–ê–ó–ú–ï–†–ï
function showFullImage(imageData) {
  const modal = document.createElement('div');
  modal.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      cursor: pointer;
  `;

  const img = document.createElement('img');
  img.src = imageData;
  img.style.cssText = `
      max-width: 90%;
      max-height: 90%;
      object-fit: contain;
      border-radius: 10px;
  `;

  modal.appendChild(img);
  modal.onclick = () => document.body.removeChild(modal);
  document.body.appendChild(modal);
}

async function deletePlanet(planetId) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø–ª–∞–Ω–µ—Ç—É?')) return;

    try {
        const response = await fetch(`http://127.0.0.1:5001/api/planets/${planetId}`, {
            method: 'DELETE'
        });
        const result = await response.json();

        if (result.success) {
            alert('–ü–ª–∞–Ω–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞');
            loadPlanets();
        } else {
            alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + result.error);
        }
    } catch (error) {
        alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + error.message);
    }
}

async function loadPlanetData(planetId) {
  try {
      const response = await fetch('http://127.0.0.1:5001/api/planets');
      const result = await response.json();

      if (result.success) {
          const planet = result.planets.find(p => p.id === planetId);
          if (planet) {
              // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è–º–∏
              fillObservations(planet.observations);
              // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ä–±–∏—Ç—ã
              fillOrbitResults(planet.orbital_elements);
              // –ó–ê–ì–†–£–ñ–ê–ï–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï
              if (planet.image_data) {
                  loadPlanetImage(planet.image_data);
              } else {
                  removeImage(); // –û—á–∏—â–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
              }
              alert(`‚úÖ –î–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã "${planet.name}" –∑–∞–≥—Ä—É–∂–µ–Ω—ã`);
          }
      }
  } catch (error) {
      alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
  }
}

function loadPlanetImage(imageData) {
  const imagePreview = document.getElementById('imagePreview');
  if (imageData && imagePreview) {
      imagePreview.innerHTML = '';
      const img = document.createElement('img');
      img.src = imageData;
      img.alt = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–µ—Ç—ã';
      imagePreview.appendChild(img);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
      localStorage.setItem('cometImage', imageData);
  }
}

function fillObservations(observations) {
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ—á–∫–∏
    const pointsContainer = document.getElementById('points-container');
    pointsContainer.innerHTML = '';
    pointCounter = 0;

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –∏–∑ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
    observations.forEach((obs, index) => {
        pointCounter++;
        const newPoint = document.createElement('div');
        newPoint.className = 'point-row';
        newPoint.innerHTML = `
            <div class="point-label">–¢–æ—á–∫–∞ ${pointCounter}:</div>
            <input type="datetime-local" id="time${pointCounter}" value="${obs.time.replace(' ', 'T')}">
            <input type="number" id="ra${pointCounter}" placeholder="–ü—Ä—è–º–æ–µ –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ (—á–∞—Å—ã)" step="0.1" value="${obs.ra}">
            <input type="number" id="dec${pointCounter}" placeholder="–°–∫–ª–æ–Ω–µ–Ω–∏–µ (–≥—Ä–∞–¥—É—Å—ã)" step="0.1" value="${obs.dec}">
        `;
        pointsContainer.appendChild(newPoint);
    });
}

function fillOrbitResults(orbit) {
    document.getElementById('semiMajorAxis').textContent = orbit.semi_major_axis;
    document.getElementById('eccentricity').textContent = orbit.eccentricity;
    document.getElementById('inclination').textContent = orbit.inclination;
    document.getElementById('longitudeNode').textContent = orbit.longitude_ascending;
    document.getElementById('argumentPerihelion').textContent = orbit.argument_pericenter;
    document.getElementById('trueAnomaly').textContent = orbit.true_anomaly;

    currentOrbitData = orbit;
}

async function savePlanet() {
  const name = document.getElementById('planetName').value.trim();
  if (!name) {
      alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç—ã');
      return;
  }

  const observations = collectObservationData();
  if (observations.length < 5) {
      alert('–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 5 –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      return;
  }

  if (!currentOrbitData) {
      alert('–°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–±–∏—Ç—ã');
      return;
  }

  // –ü–û–õ–£–ß–ê–ï–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –ò–ó LOCALSTORAGE
  const imageData = localStorage.getItem('cometImage') || '';

  try {
      const response = await fetch('http://127.0.0.1:5001/api/planets', {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json',
          },
          body: JSON.stringify({
              name: name,
              observations: observations,
              orbital_elements: currentOrbitData,
              image_data: imageData  // –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï
          })
      });

      const result = await response.json();

      if (result.success) {
          alert('‚úÖ –ü–ª–∞–Ω–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! ID: ' + result.planet_id);
          document.getElementById('planetName').value = '';
          loadPlanets();
      } else {
          alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + result.error);
      }
  } catch (error) {
      alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + error.message);
  }
}

// –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –§–£–ù–ö–¶–ò–ò (–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

function addPoint() {
    pointCounter++;

    const pointsContainer = document.getElementById("points-container");

    const newPoint = document.createElement("div");
    newPoint.className = "point-row";
    newPoint.innerHTML = `
        <div class="point-label">–¢–æ—á–∫–∞ ${pointCounter}:</div>
        <input type="datetime-local" id="time${pointCounter}">
        <input type="number" id="ra${pointCounter}" placeholder="–ü—Ä—è–º–æ–µ –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ (—á–∞—Å—ã)" step="0.1">
        <input type="number" id="dec${pointCounter}" placeholder="–°–∫–ª–æ–Ω–µ–Ω–∏–µ (–≥—Ä–∞–¥—É—Å—ã)" step="0.1">
    `;

    pointsContainer.appendChild(newPoint);
}

function collectObservationData() {
    const observations = [];

    for (let i = 1; i <= pointCounter; i++) {
        const timeInput = document.getElementById("time" + i);
        const raInput = document.getElementById("ra" + i);
        const decInput = document.getElementById("dec" + i);

        if (!timeInput || !raInput || !decInput) {
            console.warn(`–≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ç–æ—á–∫–∏ ${i} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
            continue;
        }

        const time = timeInput.value;
        const ra = raInput.value;
        const dec = decInput.value;

        if (time && time.trim() !== '' &&
            ra && ra.trim() !== '' &&
            dec && dec.trim() !== '') {

            observations.push({
                time: time.replace('T', ' ') + ':00',
                ra: parseFloat(ra),
                dec: parseFloat(dec)
            });
        }
    }

    console.log("–°–æ–±—Ä–∞–Ω–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π:", observations.length, observations);
    return observations;
}

async function calculateOrbit() {
    const observations = collectObservationData();
    console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:", observations);

    if (observations.length < 5) {
        alert('–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 5 –Ω–∞–±–ª—é–¥–µ–Ω–∏–π! –ó–∞–ø–æ–ª–Ω–µ–Ω–æ: ' + observations.length);
        return;
    }

    try {
        const response = await fetch('http://127.0.0.1:5001/api/calculate-orbit', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                observations: observations
            })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        console.log("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", result);

        if (result.success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–±–∏—Ç—ã
            document.getElementById('semiMajorAxis').textContent = result.orbit.semi_major_axis?.toFixed(6) || '-';
            document.getElementById('eccentricity').textContent = result.orbit.eccentricity?.toFixed(6) || '-';
            document.getElementById('inclination').textContent = result.orbit.inclination?.toFixed(6) || '-';
            document.getElementById('longitudeNode').textContent = result.orbit.longitude_ascending?.toFixed(6) || '-';
            document.getElementById('argumentPerihelion').textContent = result.orbit.argument_pericenter?.toFixed(6) || '-';
            document.getElementById('trueAnomaly').textContent = result.orbit.true_anomaly?.toFixed(6) || '-';

            currentOrbitData = result.orbit;
            alert('‚úÖ –û—Ä–±–∏—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã!');
        } else {
            alert('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + result.error);
        }
    } catch (error) {
        console.error("–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
        alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + error.message);
    }
}

async function calculateApproach() {
    const semiMajorAxis = document.getElementById('semiMajorAxis').textContent;
    const eccentricity = document.getElementById('eccentricity').textContent;

    if (semiMajorAxis === '-' || eccentricity === '-') {
        alert('–°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–±–∏—Ç—ã!');
        return;
    }

    const orbitParams = {
        semi_major_axis: parseFloat(semiMajorAxis),
        eccentricity: parseFloat(eccentricity),
        inclination: parseFloat(document.getElementById('inclination').textContent),
        longitude_ascending: parseFloat(document.getElementById('longitudeNode').textContent),
        argument_pericenter: parseFloat(document.getElementById('argumentPerihelion').textContent),
        true_anomaly: parseFloat(document.getElementById('trueAnomaly').textContent) || 0
    };

    try {
        const response = await fetch('http://127.0.0.1:5001/api/calculate-approach', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                orbit: orbitParams
            })
        });

        const result = await response.json();

        if (result.success) {
            document.getElementById('approachDate').textContent = result.approach.date;
            document.getElementById('approachDistance').textContent = result.approach.distance_au?.toFixed(6) + ' –∞.–µ.';
            document.getElementById('collisionStatus').textContent = result.approach.is_safe ? '–ë–µ–∑–æ–ø–∞—Å–Ω–æ' : '–û–ø–∞—Å–Ω–æ!';
            document.getElementById('collisionStatus').className = result.approach.is_safe ? 'safe-status' : 'danger-status';

            alert('‚úÖ –°–±–ª–∏–∂–µ–Ω–∏–µ —Å –ó–µ–º–ª–µ–π —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ!');
        } else {
            alert('–û—à–∏–±–∫–∞: ' + result.error);
        }
    } catch (error) {
        alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: ' + error.message);
    }
}



document.addEventListener('DOMContentLoaded', function() {
  // –°–æ–∑–¥–∞–µ–º 5 –ø—É—Å—Ç—ã—Ö —Ç–æ—á–µ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  for (let i = 4; i <= 5; i++) {
      addPoint();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  initImageUpload();

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  restoreImage();

  loadPlanets(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–µ—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
});
