"""
–†—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π - –º–∞—Å—Å–∏–≤—ã –ø–æ 5 —Å–∏–º–≤–æ–ª–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏
"""

from orbit_calculator import CometOrbitCalculator
from datetime import datetime

def validate_datetime(date_str, time_str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        datetime_str = f"{date_str} {time_str}"
        datetime.strptime(datetime_str, "%Y-%m-%d %H:%M")
        return True, ""
    except ValueError as e:
        return False, f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {e}"

def manual_input_5chars():
    """–†—É—á–Ω–æ–π –≤–≤–æ–¥ —Å –º–∞—Å—Å–∏–≤–∞–º–∏ –ø–æ 5 —Å–∏–º–≤–æ–ª–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏"""
    print("üéØ –†–£–ß–ù–û–ô –í–í–û–î –ù–ê–ë–õ–Æ–î–ï–ù–ò–ô")
    print("=" * 40)
    print("–§–æ—Ä–º–∞—Ç: –ß–ß.–ß –ì–ì.–ì –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
    print("–ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 00:00")

    calculator = CometOrbitCalculator()

    for i in range(5):
        print(f"\n--- –ù–∞–±–ª—é–¥–µ–Ω–∏–µ {i+1} ---")

        while True:
            ra = input("–ü—Ä—è–º–æ–µ –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ (—á–∞—Å—ã): ").strip()[:5]
            dec = input("–°–∫–ª–æ–Ω–µ–Ω–∏–µ (–≥—Ä–∞–¥—É—Å—ã): ").strip()[:5]
            date_str = input("–î–∞—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î): ").strip()[:10]
            time_str = input("–í—Ä–µ–º—è (–ß–ß:–ú–ú): ").strip()[:5]

            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º 00:00
            if not time_str:
                time_str = "00:00"
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –±–µ–∑ –º–∏–Ω—É—Ç, –¥–æ–±–∞–≤–ª—è–µ–º :00
            elif ":" not in time_str and len(time_str) <= 2:
                time_str = f"{time_str}:00"

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–∞
                ra_val = float(ra)
                dec_val = float(dec)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                valid, error_msg = validate_datetime(date_str, time_str)
                if not valid:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞—Ç–µ/–≤—Ä–µ–º–µ–Ω–∏: {error_msg}")
                    print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n")
                    continue

                # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
                calculator.add_observation(ra_val, dec_val, date_str, time_str)
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ")
                break

            except ValueError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —á–∏—Å–ª–∞—Ö: {e}")
                print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n")

    return calculator, 5

def main():
    calculator, count = manual_input_5chars()

    if count < 3:
        print(f"\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {count}")
        return

    print("\nüßÆ –†–∞—Å—á–µ—Ç...")

    try:
        elements = calculator.calculate_orbital_elements()

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø–æ–∏—Å–∫–∞ —Å–±–ª–∏–∂–µ–Ω–∏—è
        last_observation = max(calculator.observations, key=lambda x: x['jd'])
        approach_date, approach_dist = calculator.find_closest_approach(elements)

        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"–ë–æ–ª—å—à–∞—è –ø–æ–ª—É–æ—Å—å: {elements['a']:.3f} –∞.–µ.")
        print(f"–≠–∫—Å—Ü–µ–Ω—Ç—Ä–∏—Å–∏—Ç–µ—Ç: {elements['e']:.4f}")
        print(f"–ù–∞–∫–ª–æ–Ω–µ–Ω–∏–µ: {elements['i']:.2f}¬∞")
        print(f"–î–æ–ª–≥–æ—Ç–∞ —É–∑–ª–∞: {elements['Omega']:.1f}¬∞")
        print(f"–ê—Ä–≥—É–º–µ–Ω—Ç –ø–µ—Ä–∏—Ü–µ–Ω—Ç—Ä–∞: {elements['omega']:.1f}¬∞")
        print(f"–ü–µ—Ä–∏–æ–¥: {elements['period']:.2f} –ª–µ—Ç")
        print(f"–°–±–ª–∏–∂–µ–Ω–∏–µ: {approach_date}")
        print(f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {approach_dist:.3f} –∞.–µ.")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è—Ö
        print(f"\nüìÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: {calculator.get_observation_count()}")
        print("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π:")
        for i, obs in enumerate(calculator.observations, 1):
            print(f"  {i}. {obs['datetime']} (JD: {obs['jd']:.4f})")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
