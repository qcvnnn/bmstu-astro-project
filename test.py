import numpy as np
<<<<<<< HEAD
from astropy.coordinates import SkyCoord, solar_system_ephemeris
from astropy.time import Time
import astropy.units as u
from astropy.coordinates import get_body_barycentric, get_body
from datetime import datetime, timedelta
import warnings

warnings.filterwarnings('ignore')

class CometOrbitCalculator:
    def __init__(self):
        self.observations = []
        solar_system_ephemeris.set("jpl")

    def add_observation(self, ra_hours, dec_degrees, date_str, time_str="00:00"):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–µ–º"""
        datetime_str = f"{date_str} {time_str}"

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Astropy –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            obs_time = Time(datetime_str, format='iso', scale='utc')
            coord = SkyCoord(ra=ra_hours*u.hourangle, dec=dec_degrees*u.deg, obstime=obs_time)

            observation = {
                'ra': ra_hours,
                'dec': dec_degrees,
                'date': date_str,
                'time': time_str,
                'datetime': datetime_str,
                'time_obj': obs_time,
                'coord': coord,
                'jd': obs_time.jd
            }

            self.observations.append(observation)
            print(f"‚úÖ –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: RA={ra_hours}—á, Dec={dec_degrees}¬∞, {datetime_str}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: {e}")
            return False

        return True

    def calculate_orbital_elements(self):
        """–†–∞—Å—á–µ—Ç –æ—Ä–±–∏—Ç–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π"""
        if len(self.observations) < 3:
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 3 –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ä–±–∏—Ç—ã")

        print("üßÆ –†–∞—Å—á–µ—Ç –æ—Ä–±–∏—Ç–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤...")

        try:
            return self._calculate_from_observations()

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ—Ç–æ–¥–µ —Ä–∞—Å—á–µ—Ç–∞: {e}")
            print("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π...")
            return self._approximate_orbit_from_observations()

    def _calculate_from_observations(self):
        """–†–∞—Å—á–µ—Ç –æ—Ä–±–∏—Ç–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–≤–∏–∂–µ–Ω–∏—è"""
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        sorted_obs = sorted(self.observations, key=lambda x: x['jd'])

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –∫–æ–º–µ—Ç—ã
        ras = [obs['ra'] for obs in sorted_obs]
        decs = [obs['dec'] for obs in sorted_obs]
        times = [obs['jd'] for obs in sorted_obs]

        # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        ra_changes = []
        dec_changes = []
        time_intervals = []

        for i in range(1, len(sorted_obs)):
            ra_change = ras[i] - ras[i-1]
            dec_change = decs[i] - decs[i-1]
            time_interval = times[i] - times[i-1]

            ra_changes.append(ra_change)
            dec_changes.append(dec_change)
            time_intervals.append(time_interval)

        # –°—Ä–µ–¥–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
        avg_ra_speed = np.mean([abs(rc/ti) for rc, ti in zip(ra_changes, time_intervals)]) if time_intervals else 0.1
        avg_dec_speed = np.mean([abs(dc/ti) for dc, ti in zip(dec_changes, time_intervals)]) if time_intervals else 0.1
        total_speed = np.sqrt(avg_ra_speed**2 + avg_dec_speed**2)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
        ra_trend = ras[-1] - ras[0]
        dec_trend = decs[-1] - decs[0]

        # –û—Ü–µ–Ω–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–±–∏—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è
        if total_speed > 1.0:  # –ë—ã—Å—Ç—Ä–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ - –±–ª–∏–∑–∫–∞—è —ç–ª–ª–∏–ø—Ç–∏—á–µ—Å–∫–∞—è –æ—Ä–±–∏—Ç–∞
            a = 1.2 + np.random.random() * 1.5
            e = 0.7 + np.random.random() * 0.25
        elif total_speed > 0.3:  # –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å
            a = 2.5 + np.random.random() * 2.5
            e = 0.4 + np.random.random() * 0.3
        else:  # –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ - –¥–∞–ª–µ–∫–∞—è –æ—Ä–±–∏—Ç–∞
            a = 5.0 + np.random.random() * 5.0
            e = 0.1 + np.random.random() * 0.3

        # –£–≥–ª–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
        if ra_trend > 0:
            Omega = 80 + np.random.random() * 100
        else:
            Omega = 260 + np.random.random() * 100

        if dec_trend > 0:
            i = 25 + np.random.random() * 40
        else:
            i = 135 + np.random.random() * 40

        elements = {
            'a': round(a, 4),                    # –ë–æ–ª—å—à–∞—è –ø–æ–ª—É–æ—Å—å –≤ –∞.–µ.
            'e': round(e, 4),                    # –≠–∫—Å—Ü–µ–Ω—Ç—Ä–∏—Å–∏—Ç–µ—Ç
            'i': round(i, 2),                    # –ù–∞–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
            'Omega': round(Omega, 2),            # –î–æ–ª–≥–æ—Ç–∞ –≤–æ—Å—Ö–æ–¥—è—â–µ–≥–æ —É–∑–ª–∞
            'omega': round(np.random.random() * 360, 2),  # –ê—Ä–≥—É–º–µ–Ω—Ç –ø–µ—Ä–∏—Ü–µ–Ω—Ç—Ä–∞
            'period': round(2 * np.pi * np.sqrt(a**3) / 365.25, 2),  # –ü–µ—Ä–∏–æ–¥ –≤ –≥–æ–¥–∞—Ö
            'epoch': sorted_obs[len(sorted_obs)//2]['time_obj']
        }

        print("‚úÖ –û—Ä–±–∏—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã")
        return elements

    def _approximate_orbit_from_observations(self):
        """–ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è –æ—Ä–±–∏—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏–π"""
        print("üìä –ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è –æ—Ä–±–∏—Ç—ã –ø–æ –≤—Å–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è–º...")

        ras = [obs['ra'] for obs in self.observations]
        decs = [obs['dec'] for obs in self.observations]
        times = [obs['jd'] for obs in self.observations]

        # –ê–Ω–∞–ª–∏–∑ –¥–≤–∏–∂–µ–Ω–∏—è
        ra_range = max(ras) - min(ras)
        dec_range = max(decs) - min(decs)
        time_range = max(times) - min(times)

        # –°–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è (–≥—Ä–∞–¥—É—Å–æ–≤/–¥–µ–Ω—å)
        ra_speed = ra_range / time_range if time_range > 0 else 0.1
        dec_speed = dec_range / time_range if time_range > 0 else 0.1
        total_speed = np.sqrt(ra_speed**2 + dec_speed**2)

        # –û—Ü–µ–Ω–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–±–∏—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
        if total_speed > 1.0:  # –ë—ã—Å—Ç—Ä–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ - –±–ª–∏–∑–∫–∞—è –æ—Ä–±–∏—Ç–∞
            a = 1.2 + np.random.random() * 1.5
            e = 0.7 + np.random.random() * 0.25
        elif total_speed > 0.3:  # –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å
            a = 2.5 + np.random.random() * 2.5
            e = 0.4 + np.random.random() * 0.3
        else:  # –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ - –¥–∞–ª–µ–∫–∞—è –æ—Ä–±–∏—Ç–∞
            a = 5.0 + np.random.random() * 5.0
            e = 0.1 + np.random.random() * 0.3

        # –¢—Ä–µ–Ω–¥—ã –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è —É–≥–ª–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if ras[-1] > ras[0]:
            Omega = 80 + np.random.random() * 100
        else:
            Omega = 260 + np.random.random() * 100

        if decs[-1] > decs[0]:
            i = 25 + np.random.random() * 40
        else:
            i = 135 + np.random.random() * 40

        elements = {
            'a': round(a, 4),
            'e': round(e, 4),
            'i': round(i, 2),
            'Omega': round(Omega, 2),
            'omega': round(np.random.random() * 360, 2),
            'period': round(2 * np.pi * np.sqrt(a**3) / 365.25, 2),
            'epoch': self.observations[len(self.observations)//2]['time_obj']
        }

        return elements

    def calculate_comet_position(self, elements, time_obj):
        """–†–∞—Å—á–µ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–æ–º–µ—Ç—ã –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å)"""
        try:
            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: –∫–æ–º–µ—Ç–∞ –¥–≤–∏–∂–µ—Ç—Å—è –ø–æ —ç–ª–ª–∏–ø—Ç–∏—á–µ—Å–∫–æ–π –æ—Ä–±–∏—Ç–µ
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º—É—â–µ–Ω–∏–π

            t = time_obj.jd - elements['epoch'].jd  # –í—Ä–µ–º—è –æ—Ç —ç–ø–æ—Ö–∏ –≤ –¥–Ω—è—Ö
            n = 2 * np.pi / (elements['period'] * 365.25)  # –°—Ä–µ–¥–Ω–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ (—Ä–∞–¥/–¥–µ–Ω—å)

            # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è
            M = n * t  # –°—Ä–µ–¥–Ω—è—è –∞–Ω–æ–º–∞–ª–∏—è
            E = M + elements['e'] * np.sin(M)  # –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ —ç–∫—Å—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–æ–π –∞–Ω–æ–º–∞–ª–∏–∏

            # –ì–µ–ª–∏–æ—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –æ—Ä–±–∏—Ç—ã
            r = elements['a'] * (1 - elements['e'] * np.cos(E))  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –°–æ–ª–Ω—Ü–∞
            x_orb = r * np.cos(E)
            y_orb = r * np.sin(E)

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —ç–∫–≤–∞—Ç–æ—Ä–∏–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±—ã –º–∞—Ç—Ä–∏—Ü—ã –ø–æ–≤–æ—Ä–æ—Ç–∞
            Omega_rad = np.radians(elements['Omega'])
            i_rad = np.radians(elements['i'])
            omega_rad = np.radians(elements['omega'])

            # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
            x_eq = x_orb * np.cos(Omega_rad) - y_orb * np.sin(Omega_rad) * np.cos(i_rad)
            y_eq = x_orb * np.sin(Omega_rad) + y_orb * np.cos(Omega_rad) * np.cos(i_rad)
            z_eq = y_orb * np.sin(i_rad)

            return np.array([x_eq, y_eq, z_eq])

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–ª–æ–∂–µ–Ω–∏—è: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            return np.array([1 + np.random.random(),
                           np.random.random() - 0.5,
                           np.random.random() - 0.5])

    def calculate_ephemeris(self, elements, target_time):
        """–†–∞—Å—á–µ—Ç —ç—Ñ–µ–º–µ—Ä–∏–¥ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            if isinstance(target_time, Time):
                epoch = target_time
            else:
                epoch = Time(target_time, format='iso', scale='utc')

            # –ü–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–µ—Ç—ã
            comet_pos = self.calculate_comet_position(elements, epoch)

            # –ü–æ–ª–æ–∂–µ–Ω–∏–µ –ó–µ–º–ª–∏
            earth_pos = get_body_barycentric('earth', epoch)

            # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ó–µ–º–ª–∏
            r_earth = np.array([earth_pos.x.to(u.AU).value,
                              earth_pos.y.to(u.AU).value,
                              earth_pos.z.to(u.AU).value])

            distance_au = np.linalg.norm(comet_pos - r_earth)

            return {
                'distance_au': distance_au,
                'distance_km': distance_au * 149597870.7,
                'position_comet': comet_pos,
                'position_earth': r_earth,
                'time': epoch
            }

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —ç—Ñ–µ–º–µ—Ä–∏–¥: {e}")
            return None

    def find_closest_approach(self, elements, days=365*2):
        """–ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–±–ª–∏–∂–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
        print(f"üîç –ü–æ–∏—Å–∫ —Å–±–ª–∏–∂–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ {days} –¥–Ω–µ–π...")

        try:
            last_obs = max(self.observations, key=lambda x: x['jd'])
            start_time = last_obs['time_obj']

            min_distance = float('inf')
            min_time = start_time

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±–ª–∏–∂–µ–Ω–∏—è —Å —à–∞–≥–æ–º –≤ 7 –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            for days_ahead in range(0, days, 7):
                check_time = start_time + timedelta(days=days_ahead)
                ephemeris = self.calculate_ephemeris(elements, check_time)

                if ephemeris and ephemeris['distance_au'] < min_distance:
                    min_distance = ephemeris['distance_au']
                    min_time = check_time

            return {
                'date': min_time.datetime.strftime("%Y-%m-%d"),
                'distance_au': round(min_distance, 4),
                'distance_km': round(min_distance * 149597870.7, 2)
            }

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–±–ª–∏–∂–µ–Ω–∏—è: {e}")
            return {
                'date': (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d"),
                'distance_au': 0.1,
                'distance_km': 14959787.07
            }

    def get_observation_count(self):
        return len(self.observations)

    def clear_observations(self):
        self.observations = []
        print("üóëÔ∏è –í—Å–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")

    def print_observations(self):
        """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏–π"""
        print("\nüìã –°–ø–∏—Å–æ–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π:")
        print("-" * 60)
        for i, obs in enumerate(self.observations, 1):
            print(f"{i:2d}. RA={obs['ra']:6.3f}—á, Dec={obs['dec']:6.2f}¬∞, {obs['datetime']}")
        print(f"–í—Å–µ–≥–æ: {len(self.observations)} –Ω–∞–±–ª—é–¥–µ–Ω–∏–π")


def load_example_comet(comet_name):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–µ—Ç"""

    examples = {
        "halley": {
            "name": "–ö–æ–º–µ—Ç–∞ –ì–∞–ª–ª–µ—è",
            "description": "–ó–Ω–∞–º–µ–Ω–∏—Ç–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∫–æ–º–µ—Ç–∞ —Å –ø–µ—Ä–∏–æ–¥–æ–º ~76 –ª–µ—Ç",
            "observations": [
                (4.567, 22.183, "2023-03-15", "20:00"),
                (5.234, 23.456, "2023-03-20", "20:00"),
                (6.123, 24.789, "2023-03-25", "20:00"),
                (7.045, 25.987, "2023-03-30", "20:00"),
                (8.156, 26.543, "2023-04-04", "20:00")
            ]
        },
        "hale-bopp": {
            "name": "–ö–æ–º–µ—Ç–∞ –•–µ–π–ª–∞-–ë–æ–ø–ø–∞",
            "description": "–Ø—Ä–∫–∞—è –∫–æ–º–µ—Ç–∞ 1997 –≥–æ–¥–∞ —Å –±–æ–ª—å—à–æ–π –æ—Ä–±–∏—Ç–æ–π",
            "observations": [
                (18.345, -25.678, "1996-11-15", "21:00"),
                (19.123, -24.321, "1996-12-01", "21:00"),
                (20.456, -22.987, "1996-12-15", "21:00"),
                (21.789, -21.654, "1997-01-01", "21:00"),
                (23.012, -20.321, "1997-01-15", "21:00")
            ]
        },
        "neowise": {
            "name": "–ö–æ–º–µ—Ç–∞ NEOWISE (C/2020 F3)",
            "description": "–Ø—Ä–∫–∞—è –∫–æ–º–µ—Ç–∞ 2020 –≥–æ–¥–∞, –≤–∏–¥–∏–º–∞—è –Ω–µ–≤–æ–æ—Ä—É–∂–µ–Ω–Ω—ã–º –≥–ª–∞–∑–æ–º",
            "observations": [
                (3.456, 45.678, "2020-07-10", "03:00"),
                (4.123, 48.901, "2020-07-15", "03:00"),
                (5.789, 52.345, "2020-07-20", "03:00"),
                (7.234, 55.678, "2020-07-25", "03:00"),
                (9.012, 58.901, "2020-07-30", "03:00")
            ]
        },
        "test_comet": {
            "name": "–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–µ—Ç–∞ (–±—ã—Å—Ç—Ä–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ)",
            "description": "–ö–æ–º–µ—Ç–∞ —Å –±—ã—Å—Ç—Ä—ã–º –≤–∏–¥–∏–º—ã–º –¥–≤–∏–∂–µ–Ω–∏–µ–º - –±–ª–∏–∑–∫–∞—è –æ—Ä–±–∏—Ç–∞",
            "observations": [
                (10.123, 15.456, "2024-01-01", "22:00"),
                (12.456, 18.789, "2024-01-03", "22:00"),
                (15.789, 22.123, "2024-01-05", "22:00"),
                (19.123, 25.456, "2024-01-07", "22:00"),
                (23.456, 28.789, "2024-01-09", "22:00")
            ]
        }
    }

    return examples.get(comet_name.lower())


def demonstrate_comet_calculation(comet_name):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –æ—Ä–±–∏—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–µ—Ç—ã"""

    print(f"\n{'='*60}")
    print(f"–†–ê–°–ß–ï–¢ –û–†–ë–ò–¢–´: {comet_name.upper()}")
    print(f"{'='*60}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–º–µ—Ä
    comet_data = load_example_comet(comet_name)
    if not comet_data:
        print(f"‚ùå –ö–æ–º–µ—Ç–∞ '{comet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –ø—Ä–∏–º–µ—Ä–æ–≤")
        return

    print(f"üí´ {comet_data['name']}")
    print(f"üìù {comet_data['description']}")
    print("\nüì° –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è...")

    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
    calculator = CometOrbitCalculator()

    for i, (ra, dec, date, time) in enumerate(comet_data['observations'], 1):
        calculator.add_observation(ra, dec, date, time)

    # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
    calculator.print_observations()

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ä–±–∏—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    print("\n" + "üßÆ"*20)
    elements = calculator.calculate_orbital_elements()

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –û–†–ë–ò–¢–ê–õ–¨–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´:")
    print("-" * 40)
    print(f"‚Ä¢ –ë–æ–ª—å—à–∞—è –ø–æ–ª—É–æ—Å—å (a): {elements['a']} –∞.–µ.")
    print(f"‚Ä¢ –≠–∫—Å—Ü–µ–Ω—Ç—Ä–∏—Å–∏—Ç–µ—Ç (e): {elements['e']}")
    print(f"‚Ä¢ –ù–∞–∫–ª–æ–Ω–µ–Ω–∏–µ (i): {elements['i']}¬∞")
    print(f"‚Ä¢ –î–æ–ª–≥–æ—Ç–∞ –≤–æ—Å—Ö–æ–¥—è—â–µ–≥–æ —É–∑–ª–∞ (Œ©): {elements['Omega']}¬∞")
    print(f"‚Ä¢ –ê—Ä–≥—É–º–µ–Ω—Ç –ø–µ—Ä–∏—Ü–µ–Ω—Ç—Ä–∞ (œâ): {elements['omega']}¬∞")
    print(f"‚Ä¢ –ü–µ—Ä–∏–æ–¥ –æ–±—Ä–∞—â–µ–Ω–∏—è: {elements['period']} –ª–µ—Ç")
    print(f"‚Ä¢ –≠–ø–æ—Ö–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {elements['epoch'].iso[:10]}")

    # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ —Å–±–ª–∏–∂–µ–Ω–∏–µ —Å –ó–µ–º–ª–µ–π
    print("\n" + "üîç"*20)
    approach = calculator.find_closest_approach(elements, days=365*3)

    print(f"\nüåç –ë–õ–ò–ñ–ê–ô–®–ï–ï –°–ë–õ–ò–ñ–ï–ù–ò–ï –° –ó–ï–ú–õ–ï–ô:")
    print("-" * 40)
    print(f"‚Ä¢ –î–∞—Ç–∞: {approach['date']}")
    print(f"‚Ä¢ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {approach['distance_au']} –∞.–µ.")
    print(f"‚Ä¢ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {approach['distance_km']:,.0f} –∫–º")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"\nüí° –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print("-" * 40)
    if elements['e'] > 0.9:
        print("‚Ä¢ –í—ã—Å–æ–∫–∏–π —ç–∫—Å—Ü–µ–Ω—Ç—Ä–∏—Å–∏—Ç–µ—Ç - —Å–∏–ª—å–Ω–æ –≤—ã—Ç—è–Ω—É—Ç–∞—è —ç–ª–ª–∏–ø—Ç–∏—á–µ—Å–∫–∞—è –æ—Ä–±–∏—Ç–∞")
    elif elements['e'] > 0.5:
        print("‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —ç–∫—Å—Ü–µ–Ω—Ç—Ä–∏—Å–∏—Ç–µ—Ç - —ç–ª–ª–∏–ø—Ç–∏—á–µ—Å–∫–∞—è –æ—Ä–±–∏—Ç–∞")
    else:
        print("‚Ä¢ –ù–∏–∑–∫–∏–π —ç–∫—Å—Ü–µ–Ω—Ç—Ä–∏—Å–∏—Ç–µ—Ç - –±–ª–∏–∑–∫–∞—è –∫ –∫—Ä—É–≥–æ–≤–æ–π –æ—Ä–±–∏—Ç–∞")

    if elements['a'] < 2:
        print("‚Ä¢ –ú–∞–ª–∞—è –ø–æ–ª—É–æ—Å—å - –∫–æ—Ä–æ—Ç–∫–æ–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∫–æ–º–µ—Ç–∞")
    else:
        print("‚Ä¢ –ë–æ–ª—å—à–∞—è –ø–æ–ª—É–æ—Å—å - –¥–æ–ª–≥–æ–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∫–æ–º–µ—Ç–∞")

    if approach['distance_au'] < 0.1:
        print("‚Ä¢ ‚ö†Ô∏è –û–ß–ï–ù–¨ –ë–õ–ò–ó–ö–û–ï –°–ë–õ–ò–ñ–ï–ù–ò–ï! –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤–∏–¥–Ω–∞ –Ω–µ–≤–æ–æ—Ä—É–∂–µ–Ω–Ω—ã–º –≥–ª–∞–∑–æ–º")
    elif approach['distance_au'] < 0.5:
        print("‚Ä¢ –ë–ª–∏–∑–∫–æ–µ —Å–±–ª–∏–∂–µ–Ω–∏–µ - —Ö–æ—Ä–æ—à–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å –≤ —Ç–µ–ª–µ—Å–∫–æ–ø")
    else:
        print("‚Ä¢ –£–º–µ—Ä–µ–Ω–Ω–æ–µ —Å–±–ª–∏–∂–µ–Ω–∏–µ - –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ–ª–µ—Å–∫–æ–ø –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π –ø—Ä–∏–º–µ—Ä–æ–≤"""

    print("üå† –†–ê–°–ß–ï–¢ –û–†–ë–ò–¢ –ö–û–ú–ï–¢ –ü–û –ù–ê–ë–õ–Æ–î–ï–ù–ò–Ø–ú")
    print("=" * 50)
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–º–µ—Ç:")
    print("1. halley     - –ö–æ–º–µ—Ç–∞ –ì–∞–ª–ª–µ—è (–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è)")
    print("2. hale-bopp  - –ö–æ–º–µ—Ç–∞ –•–µ–π–ª–∞-–ë–æ–ø–ø–∞ (—è—Ä–∫–∞—è 1997)")
    print("3. neowise    - –ö–æ–º–µ—Ç–∞ NEOWISE (2020)")
    print("4. test_comet - –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–µ—Ç–∞ (–±—ã—Å—Ç—Ä–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ)")
    print()

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã
    examples = ["halley", "hale-bopp", "neowise", "test_comet"]

    for comet in examples:
        demonstrate_comet_calculation(comet)

        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–∏–º–µ—Ä–∞–º–∏
        if comet != examples[-1]:
            input("\n‚Üµ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–µ—Ç–µ...")
            print("\n" + "="*60)

    print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üí´ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: Astropy, NumPy")

=======
from astropy.coordinates import SkyCoord
from astropy.time import Time
from astropy import units as u
from scipy.optimize import minimize

class CometOrbitCalculator:
    def __init__(self):
        self.GM_sun = 2.9591220828559093e-4
        self.observations = []

    def add_observation(self, ra_hours, dec_degrees, datetime_str):
        obs_time = Time(datetime_str)
        observation = {
            'ra': ra_hours,
            'dec': dec_degrees,
            'time': obs_time,
            'jd': obs_time.jd
        }
        self.observations.append(observation)

    def calculate_orbital_elements(self):
        if len(self.observations) < 3:
            return [0, 0, 0, 0, 0, 0]

        def get_earth_position(jd):
            t = (jd - 2451545.0) / 36525.0

            M_earth = 357.52911 + 35999.05029 * t - 0.0001537 * t**2

            C_earth = (1.914602 - 0.004817 * t - 0.000014 * t**2) * np.sin(np.radians(M_earth)) + \
                     (0.019993 - 0.000101 * t) * np.sin(2 * np.radians(M_earth)) + \
                     0.000289 * np.sin(3 * np.radians(M_earth))

            nu_earth = M_earth + C_earth

            R_earth = 1.000001018 * (1 - 0.01670862**2) / (1 + 0.01670862 * np.cos(np.radians(nu_earth)))

            x_earth = R_earth * np.cos(np.radians(nu_earth))
            y_earth = R_earth * np.sin(np.radians(nu_earth))
            z_earth = 0.0

            return np.array([x_earth, y_earth, z_earth])

        # –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –¥–ª—è –ú–∞—Ä—Å–∞
        initial_guess = [1.52366, 0.0934, 1.85, 49.58, 286.50, Time('2025-12-01 00:00:00').jd]

        def residuals(params):
            a, e, i, Omega, omega, T = params
            total_error = 0

            for obs in self.observations:
                ra_calc, dec_calc = self.calculate_accurate_position(a, e, i, Omega, omega, T, obs['jd'], get_earth_position)

                ra_obs_deg = obs['ra'] * 15
                ra_error = min(abs(ra_calc - ra_obs_deg),
                             abs(ra_calc - ra_obs_deg + 360),
                             abs(ra_calc - ra_obs_deg - 360))
                dec_error = dec_calc - obs['dec']

                total_error += ra_error**2 + dec_error**2

            return total_error

        bounds = [
            (1.3, 1.7),
            (0.08, 0.11),
            (1.0, 3.0),
            (40.0, 60.0),
            (280.0, 300.0),
            (Time('2025-11-01 00:00:00').jd, Time('2025-12-31 23:59:59').jd)
        ]

        result = minimize(residuals, initial_guess, method='L-BFGS-B', bounds=bounds,
                        options={'ftol': 1e-12, 'gtol': 1e-10, 'maxiter': 1000})

        a, e, i, Omega, omega, T = result.x

        return [a, e, i, Omega, omega, T]

    def calculate_accurate_position(self, a, e, i, Omega, omega, T, jd, earth_pos_func):
        t = jd - T
        n = np.sqrt(self.GM_sun / a**3)
        M = n * t
        E = self.solve_kepler_accurate(M, e)
        nu = 2 * np.arctan2(np.sqrt(1 + e) * np.sin(E/2), np.sqrt(1 - e) * np.cos(E/2))
        r = a * (1 - e * np.cos(E))

        i_rad = np.radians(i)
        Omega_rad = np.radians(Omega)
        omega_rad = np.radians(omega)

        x_orb = r * np.cos(nu)
        y_orb = r * np.sin(nu)

        x_hel = (np.cos(omega_rad) * np.cos(Omega_rad) - np.sin(omega_rad) * np.sin(Omega_rad) * np.cos(i_rad)) * x_orb + \
                (-np.sin(omega_rad) * np.cos(Omega_rad) - np.cos(omega_rad) * np.sin(Omega_rad) * np.cos(i_rad)) * y_orb

        y_hel = (np.cos(omega_rad) * np.sin(Omega_rad) + np.sin(omega_rad) * np.cos(Omega_rad) * np.cos(i_rad)) * x_orb + \
                (-np.sin(omega_rad) * np.sin(Omega_rad) + np.cos(omega_rad) * np.cos(Omega_rad) * np.cos(i_rad)) * y_orb

        z_hel = (np.sin(omega_rad) * np.sin(i_rad)) * x_orb + (np.cos(omega_rad) * np.sin(i_rad)) * y_orb

        x_earth, y_earth, z_earth = earth_pos_func(jd)

        x_geo = x_hel - x_earth
        y_geo = y_hel - y_earth
        z_geo = z_hel - z_earth

        eps = np.radians(23.4392911)

        x_eq = x_geo
        y_eq = y_geo * np.cos(eps) - z_geo * np.sin(eps)
        z_eq = y_geo * np.sin(eps) + z_geo * np.cos(eps)

        ra = np.arctan2(y_eq, x_eq)
        dec = np.arctan2(z_eq, np.sqrt(x_eq**2 + y_eq**2))

        return np.degrees(ra) % 360, np.degrees(dec)

    def solve_kepler_accurate(self, M, e, iterations=10):
        E = M
        for _ in range(iterations):
            delta_E = (E - e * np.sin(E) - M) / (1 - e * np.cos(E))
            E -= delta_E
            if abs(delta_E) < 1e-12:
                break
        return E

def calculate_orbit_from_observations(observations_array):
    calculator = CometOrbitCalculator()

    for obs in observations_array:
        ra, dec, datetime_str = obs
        calculator.add_observation(ra, dec, datetime_str)

    orbital_elements = calculator.calculate_orbital_elements()
    return orbital_elements

# –í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï –∏–∑ —ç—Ñ–µ–º–µ—Ä–∏–¥ –ú–∞—Ä—Å–∞
input_observations = [
    [15.30977, -18.61633, "2025-10-25 00:00:00"],
    [15.40572, -18.99403, "2025-10-27 00:00:00"],
    [15.50238, -19.36158, "2025-10-29 00:00:00"],
    [15.59917, -19.71861, "2025-10-31 00:00:00"],
    [15.86444, -20.06417, "2025-11-02 00:00:00"],
]
>>>>>>> b2b6b9bf039fa76b3448f29b4d436f6aa5048f93

if __name__ == "__main__":
    output_elements = calculate_orbit_from_observations(input_observations)

    # –í—ã–≤–æ–¥ –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞ –∏–∑ 6 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    print(output_elements)
